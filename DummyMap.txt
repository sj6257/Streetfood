package com.dev.streetfood;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import android.net.Uri;
import android.os.Bundle;
import android.app.ActionBar;
import android.app.Activity;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.View.OnLongClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.TextView;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;


import android.content.Context;
import android.content.Intent;
import android.util.Log;
import android.support.v4.app.FragmentActivity;

import android.annotation.TargetApi;
public class shopMapView<ConfirmActivity> extends FragmentActivity implements OnMarkerClickListener{
  
  private static final String TAG = "ShopMapView";
	private GoogleMap mmap;
	private Marker addMarker; 
	private PopupWindow popUp;
	private LinearLayout layout;
	 
	   @TargetApi(11)
    @Override
    public void onCreate(Bundle savedInstanceState) {
		   Log.i(TAG,"In ShopMapView Class");
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_shop_map_view);
     // to hide the action bar
     		/*try
     		{
     		ActionBar actionBar = getActionBar();
     		actionBar.hide();
     		}
     		catch (Exception ex)
     		{
     		  Log.e(TAG,"Device Do Not Support Action Bar"+ex.toString());
     		  
     		}*/
     		
        //Intent intent=getIntent();
        //Bundle b = getIntent().getExtras();
       
     		RadioGroup radioGroupListSelector = (RadioGroup) findViewById(R.id.radio_group_map_selector);
    		radioGroupListSelector.setOnCheckedChangeListener(new OnCheckedChangeListener() 
    	    {
    			
    	        public void onCheckedChanged(RadioGroup group, int checkedId) {
    	            // checkedId is the RadioButton selected
    	      
    	        	switch (checkedId) {
    	  		  case R.id.radioPopular : 
    	  			  Log.i(TAG,"Popular Radio Button Selected");
    	  			  showPopular();
    	  			  break;
    	  		  case R.id.radioAZ :
    	  			  Log.i(TAG,"AZ Radio Button Selected");
    	  			  showAZ();
    	               break;
    	  		
    	  		  case R.id.radioNearBy :
    	  			  Log.i(TAG,"NearBy Radio Button Selected");
    	  			  showNearBy();
    	               break;
    	  		 
    	  		}
    	        }
    	    });		
     		
    		Bundle b = getIntent().getExtras();
    		String item = (String) b.get("itemName");
    		String fromView=(String) b.get("view");
     		if(fromView.equals("Detail"))
     		{
     		Log.i(TAG,"In Map View.FromView "+fromView+"With Item "+item);
     		showDetail(item);
     		}
     		else if(fromView.equals("Category"))
     		{
     			Log.i(TAG,"In Map View.FromView "+fromView+"With Item "+item);
     		showCategory(item);
     		}
     		else
     		{
     			Log.i(TAG,"In Map View.FromView "+fromView+"With Item "+item);
     		showNearBy();
     		
     		}
        
     		//sql="select shopName  from streetShopInfo where category=\""+category+"\"";
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.activity_shop_map_view, menu);
        return true;
    }
    
    
   void showPopular()
   {
	 //Retrieving Values from database
	    Log.i(TAG,"Populating Popular Stall list");
	    ArrayList<BookMark> result = new ArrayList<BookMark>();
		String sql="select  S.shopName shopName,IFNULL(S.shopInfo,\"Not Available\") shopInfo,S.latitude latitude,S.longitude longitude from streetShopInfo AS S JOIN ratings AS R  where S.shopName=R.shopName and R.overall >0 order by S.shopName";
		Log.i(TAG,"Creating Adapter for Fetching Data");
		StreetFoodDataBaseAdapter mDBAdapter= new StreetFoodDataBaseAdapter(this);
		Log.i(TAG,"Adapter Ready..");
		Log.i(TAG,"Creating/Opening Database");
		mDBAdapter.createDatabase();       
		mDBAdapter.open();
		Log.i(TAG,"Requesting info from getInfo function");
		result=mDBAdapter.getInfoForMap(sql);
		Log.i(TAG,"Information Retrived Passing it to SetView");
		setView(result);
		mDBAdapter.close();
   }
   
   void showAZ()
   {
	 //Retrieving Values from database
	    Log.i(TAG,"Populating AZ Stall list");
	    ArrayList<BookMark> result = new ArrayList<BookMark>();
		String sql="select  S.shopName shopName,IFNULL(S.shopInfo,\"Not Available\") shopInfo,S.latitude latitude,S.longitude longitude from streetShopInfo AS S  order by S.shopName";
		Log.i(TAG,"Creating Adapter for Fetching Data");
		StreetFoodDataBaseAdapter mDBAdapter= new StreetFoodDataBaseAdapter(this);
		Log.i(TAG,"Adapter Ready..");
		Log.i(TAG,"Creating/Opening Database");
		mDBAdapter.createDatabase();       
		mDBAdapter.open();
		Log.i(TAG,"Requesting info from getInfo function");
		result=mDBAdapter.getInfoForMap(sql);
		Log.i(TAG,"Information Retrived Passing it to SetView");
		setView(result);
		mDBAdapter.close();
   }
   
   void showNearBy()
   {
	 //Retrieving Values from database
	    Log.i(TAG,"Populating NearBy Stall list");
	    ArrayList<BookMark> result = new ArrayList<BookMark>();
		String sql="select  S.shopName shopName,IFNULL(S.shopInfo,\"Not Available\") shopInfo,S.latitude latitude,S.longitude longitude from streetShopInfo AS S  order by S.shopName LIMIT 10";
		Log.i(TAG,"Creating Adapter for Fetching Data");
		StreetFoodDataBaseAdapter mDBAdapter= new StreetFoodDataBaseAdapter(this);
		Log.i(TAG,"Adapter Ready..");
		Log.i(TAG,"Creating/Opening Database");
		mDBAdapter.createDatabase();       
		mDBAdapter.open();
		Log.i(TAG,"Requesting info from getInfo function");
		result=mDBAdapter.getInfoForMap(sql);
		Log.i(TAG,"Information Retrived Passing it to SetView");
		setView(result);
		mDBAdapter.close();
   }
    
   void showDetail(String shopName)
   {
	   
	   //Retrieving Values from database
	    Log.i(TAG,"Populating Detail Stall list");
	    ArrayList<BookMark> result = new ArrayList<BookMark>();
		String sql="select  S.shopName shopName,IFNULL(S.shopInfo,\"Not Available\") shopInfo,S.latitude latitude,S.longitude longitude from streetShopInfo AS S  where S.shopName=\""+shopName+"\"";
		Log.i(TAG,"Creating Adapter for Fetching Data");
		StreetFoodDataBaseAdapter mDBAdapter= new StreetFoodDataBaseAdapter(this);
		Log.i(TAG,"Adapter Ready..");
		Log.i(TAG,"Creating/Opening Database");
		mDBAdapter.createDatabase();       
		mDBAdapter.open();
		Log.i(TAG,"Requesting info from getInfo function");
		result=mDBAdapter.getInfoForMap(sql);
		Log.i(TAG,"Information Retrived Passing it to SetView");
		setView(result);
		mDBAdapter.close();
	   
		
   }
   
   
   
   void showCategory(String category)
   {
	   
	   //Retrieving Values from database
	    Log.i(TAG,"Populating Category Stall list");
	    ArrayList<BookMark> result = new ArrayList<BookMark>();
		String sql="select  S.shopName shopName,IFNULL(S.shopInfo,\"Not Available\") shopInfo,S.latitude latitude,S.longitude longitude from streetShopInfo AS S where S.category=\""+category+"\"";
		Log.i(TAG,"Creating Adapter for Fetching Data");
		StreetFoodDataBaseAdapter mDBAdapter= new StreetFoodDataBaseAdapter(this);
		Log.i(TAG,"Adapter Ready..");
		Log.i(TAG,"Creating/Opening Database");
		mDBAdapter.createDatabase();       
		mDBAdapter.open();
		Log.i(TAG,"Requesting info from getInfo function");
		result=mDBAdapter.getInfoForMap(sql);
		Log.i(TAG,"Information Retrived Passing it to SetView");
		setView(result);
		mDBAdapter.close();
	   
		
   }
   
   @Override
   public boolean onMarkerClick(final Marker marker) {
       // TODO Auto-generated method stub
      
    	   Log.i(TAG,"Clicked Marker");
    	   LayoutInflater inflater = (LayoutInflater) shopMapView.this
           .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    	   View pview = inflater.inflate(R.layout.popup_layout,(ViewGroup)findViewById(R.layout.activity_shop_map_view));
    	  final PopupWindow pw = new PopupWindow(pview);
    	               pw.showAtLocation(pview, Gravity.CENTER,0,0);
    	               pw.update(8,-50,200,200);

    	                 //if onclick written here, it gives null pointer exception.
    	               Button img=(Button)pview.findViewById(R.id.home);
    	               img.setOnClickListener( new View.OnClickListener()
    	               {
    	                   public void onClick(View v)
    	                   {
    	                	   Log.i(TAG,"Directions clicked");
    	                	   Intent intent = new Intent(android.content.Intent.ACTION_VIEW, 
    	               			    Uri.parse("http://maps.google.com/maps?saddr=18.5333,73.8514&daddr=18.5157,73.9272"));
    	               			startActivity(intent);
    	                   }

						
    	           });
    	               TextView txt = (TextView)pview.findViewById(R.id.InfoWindowText);	
    	       		txt.setText("Samosa");
    	       		
    	       	 Button close=(Button)pview.findViewById(R.id.closePopUp);
	               close.setOnClickListener( new View.OnClickListener()
	               {
	                   public void onClick(View v)
	                   {
	                	   Log.i(TAG,"Close clicked");
	                	   pw.dismiss();
	                   }

					
	           });
    	  
       
       
       return true;
   }
   void setView(ArrayList<BookMark> listOfBookMark)
   {
	   
	   double lati = 18.539394,longi=73.863206; //Co-Ordinate of Pune
	   LatLng position=new LatLng(lati,longi) ;
	   
	   mmap = ((SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map)).getMap();
	   mmap.clear();
	   mmap.setMyLocationEnabled(true);
	   
	   for(final BookMark bookMark :listOfBookMark){
		   
		  // Log.i(TAG,bookMark.getTitle()+":"+bookMark.getSnippet());
		   mmap.setOnMarkerClickListener(this);
		  addMarker= mmap.addMarker(new MarkerOptions()
		   	   .position(bookMark.getPosition())
			   .title(bookMark.getTitle())
			   .snippet(bookMark.getSnippet())
			   );
		  /* google.maps.event.addListener(mmap, 'click', function() {
			   infowindow.open(mmap,marker);
			   });
			 }*/
		   /*mmap.setInfoWindowAdapter(new InfoWindowAdapter() {
			   
	            // Use default InfoWindow frame
	            @Override
	            public View getInfoWindow(Marker arg0) {
	                return null;
	            }
	            public View onClick(){
	            	
	            }
	            // Defines the contents of the InfoWindow
	            @Override
	            public View getInfoContents(Marker arg0) {
	 
	                // Getting view from the layout file info_window_layout
	                View v = getLayoutInflater().inflate(R.layout.info_window_layout, null);
	 
	 
	                // Getting reference to the TextView to set latitude
	                TextView tvLat = (TextView) v.findViewById(R.id.tv_lat);
	 
	 
	                // Setting the latitude
	                tvLat.setText((bookMark.getTitle()));
	 
	                // 
	                // Returning the view containing InfoWindow contents
	                return v;
	 
	            }
	        });
*/			//}
	  
	   // Move the camera instantly to position with a zoom of 15.
	   //mmap.moveCamera(CameraUpdateFactory.newLatLngZoom(position, 15));
	   // Zoom in, animating the camera.
	   //mmap.animateCamera(CameraUpdateFactory.zoomTo(11), 2000, null);
	   
	// Construct a CameraPosition focusing on Mountain View and animate the camera to that position.
	   CameraPosition cameraPosition = new CameraPosition.Builder()
	       .target(position)      // Sets the center of the map to Mountain View
	       .zoom(11)                   // Sets the zoom
	       .tilt(45)                   // Sets the tilt of the camera to 30 degrees
	       .build();                   // Creates a CameraPosition from the builder
	   mmap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));
	   
	 
   }
   
   }



}
