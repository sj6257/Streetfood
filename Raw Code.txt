// location tracker
if ( gpslocation !=null  && networkLocation!=null)
{
 if (gpslocation.getTime() > networkLocation.getTime()) {
        Log.d(TAG, "Both are old, returning gps(newer)");
		if(isLatest(gpslocation))
        return gpslocation;
    } else {
        Log.d(TAG, "Both are old, returning network(newer)");
        if(isLatest(networkLocation))
        return networkLocation;
    }

}
else if(gpslocation=null)
{
\\Processing for l2
	if(isLatest(networkLocation))
        return networkLocation;
}
else
{
 \\Processing for l1
  if(isLatest(gpslocation))
        return gpslocation;
}






//Styles.XMl for 

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <style name="MyTheme" parent="android:Theme.Light">
    <item name="android:windowActionBar">true</item>
    <item name="android:windowNoTitle">false</item>
    </style>
</resources>


// version 11

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <style name="MyTheme" parent="android:Theme.Holo.Light">
    <item name="android:windowActionBar">true</item>
    <item name="android:windowNoTitle">false</item>
    </style>
</resources>


// version 14

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <style name="MyTheme" parent="android:Theme.Holo.Light.DarkActionBar">
    <item name="android:windowActionBar">true</item>
    <item name="android:windowNoTitle">false</item>
    </style>
</resources>



// for the shoplistview

    <LinearLayout
        android:id="@+id/linlaHeaderProgress"
        android:gravity="center"
        android:orientation="horizontal"
        android:visibility="gone" 
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_marginLeft="4dip"
        android:layout_marginRight="4dip"
        android:layout_weight="0.78"
        android:background="@drawable/layout_border"
        >

        <ProgressBar
            android:id="@+id/pbHeaderProgress"
            
            android:layout_width="wrap_content"
            android:layout_height="wrap_content" >
        </ProgressBar>
    </LinearLayout>




//

LinearLayout linlaHeaderProgress = (LinearLayout) findViewById(R.id.linlaHeaderProgress)
LinearLayout lin = (LinearLayout) findViewById(R.id.lin);   

//pre
lin.setVisibility(View.GONE);
linlaHeaderProgress.setVisibility(View.VISIBLE);

//post

linlaHeaderProgress.setVisibility(View.GONE);
lin.setVisibility(View.VISIBLE);





//code for asynchronous task
public class AsyncTaskDemoActivity extends Activity 
{
	
	Button bttn;
	ProgressBar progressBar;
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) 
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        bttn = (Button)findViewById(R.id.bttn);
        bttn.setOnClickListener(new View.OnClickListener()
        {

			public void onClick(View arg0) 
			{
				try
				{
				  new MyTask().execute();
				  //execute();
				}
				catch(Exception e)
				{
					Toast.makeText(AsyncTaskDemoActivity.this,"Error :"+e.toString(),Toast.LENGTH_LONG).show();
				}
			}
		});
       
    }
  
    class MyTask extends AsyncTask<Void,String,Void>
    {

		@Override
		protected void onPreExecute() 
		{
			// TODO Auto-generated method stub
			super.onPreExecute();
			//progressBar = new ProgressBar(AsyncTaskDemoActivity.this, null, android.R.attr.progressBarStyleSmall);
			progressBar=(ProgressBar)findViewById(R.id.progressBar1);
			progressBar.setVisibility(View.VISIBLE);
			Toast.makeText(AsyncTaskDemoActivity.this,"Asynchronous task started..!!",Toast.LENGTH_LONG).show();
		}

		@Override
		protected Void doInBackground(Void... params) 
		{
			// TODO Auto-generated method stub
			int i=0;
			Random g = new Random();
			while(i<=100)
			{
				int tym = g.nextInt(3001);
				try 
				{
					Thread.sleep(tym);
				} 
				catch (InterruptedException e) 
				{

				}

				int v = g.nextInt(11);
				i=i+v;

			}
			return null;
		}

	
		@Override
		protected void onPostExecute(Void result) 
		{
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			progressBar.setVisibility(View.GONE);
			Toast.makeText(AsyncTaskDemoActivity.this,"Asynchronous task completed..!",Toast.LENGTH_LONG).show();
		}
    	
    }
}



//Code for List View:

 final Activity activity = getActivity();
        if (activity != null && ViewConfiguration.get(activity).hasPermanentMenuKey()) {
            // Call settings should be available via its parent Activity.
            callSettingsMenuItem.setVisible(false);
        } else {
            callSettingsMenuItem.setVisible(true);
            callSettingsMenuItem.setIntent(DialtactsActivity.getCallSettingsIntent());
        }

/ Check if the GPS setting is currently enabled on the device.
        // This verification should be done during onStart() because the system calls this method
        // when the user returns to the activity, which ensures the desired location provider is
        // enabled each time the activity resumes from the stopped state.
        LocationManager locationManager =
                (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        final boolean gpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);

        if (!gpsEnabled) {
            // Build an alert dialog here that requests that the user enable
            // the location services, then when the user clicks the "OK" button,
            // call enableLocationSettings()
            new EnableGpsDialogFragment().show(getSupportFragmentManager(), "enableGpsDialog");
        }
		

		
		
     /**
     * Dialog to prompt users to enable GPS on the device.
     */
    private class EnableGpsDialogFragment extends DialogFragment {

        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
            return new AlertDialog.Builder(getActivity())
                    .setTitle(R.string.enable_gps)
                    .setMessage(R.string.enable_gps_dialog)
                    .setPositiveButton(R.string.enable_gps, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            enableLocationSettings();
                        }
                    })
                    .create();
        }
    }

	// Method to launch Settings
    private void enableLocationSettings() {
        Intent settingsIntent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
        startActivity(settingsIntent);
    }
		
	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


//Location Manager Modi
package com.dev.streetfood;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.Settings;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.view.View;
import android.widget.Toast;


import java.io.IOException;
import java.util.List;
import java.util.Locale;


public class LocationTracker {
	private static final int TEN_SECONDS = 10000;
    private static final int TEN_METERS = 10;
    private static final int TWO_MINUTES = 1000 * 60 * 2;
	
	public LocationTracker(Context context)
	{
	 mLocationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
	 Location gpsLocation = null;
     Location networkLocation = null;
     mLocationManager.removeUpdates(listener);
     // Request updates from both fine (gps) and coarse (network) providers.
     gpsLocation = requestUpdatesFromProvider(LocationManager.GPS_PROVIDER, R.string.not_support_gps);
     networkLocation = requestUpdatesFromProvider(LocationManager.NETWORK_PROVIDER, R.string.not_support_network);
     // If both providers return last known locations, compare the two and use the better
     // one to update the UI.  If only one provider returns a location, use it.
     if (gpsLocation != null && networkLocation != null) {
         updateUILocation(getBetterLocation(gpsLocation, networkLocation));
         } 
	 else if (gpsLocation != null) {
         updateUILocation(gpsLocation);
           } 
	else if (networkLocation != null) {
              updateUILocation(networkLocation);
           }
	
	}

 
 private final LocationListener listener = new LocationListener() {

        @Override
        public void onLocationChanged(Location location) {
            // A new location update is received.  Do something useful with it.  Update the UI with
            // the location update.
            updateUILocation(location);
        }

        @Override
        public void onProviderDisabled(String provider) {
        }

        @Override
        public void onProviderEnabled(String provider) {
        }

        @Override
        public void onStatusChanged(String provider, int status, Bundle extras) {
        }
    };
 
 
 /**
     * Method to register location updates with a desired location provider.  If the requested
     * provider is not available on the device, the app displays a Toast with a message referenced
     * by a resource id.
     *
     * @param provider Name of the requested provider.
     * @param errorResId Resource id for the string message to be displayed if the provider does
     *                   not exist on the device.
     * @return A previously returned {@link android.location.Location} from the requested provider,
     *         if exists.
     */
    private Location requestUpdatesFromProvider(final String provider, final int errorResId) {
        Location location = null;
        if (mLocationManager.isProviderEnabled(provider)) {
            mLocationManager.requestLocationUpdates(provider, TEN_SECONDS, TEN_METERS, listener);
            location = mLocationManager.getLastKnownLocation(provider);
        } else {
            Toast.makeText(this, errorResId, Toast.LENGTH_LONG).show();
        }
        return location;
    }
	
/** Determines whether one Location reading is better than the current Location fix.
      * Code taken from
      * http://developer.android.com/guide/topics/location/obtaining-user-location.html
      *
      * @param newLocation  The new Location that you want to evaluate
      * @param currentBestLocation  The current Location fix, to which you want to compare the new
      *        one
      * @return The better Location object based on recency and accuracy.
      */
    protected Location getBetterLocation(Location newLocation, Location currentBestLocation) {
        if (currentBestLocation == null) {
            // A new location is always better than no location
            return newLocation;
        }

        // Check whether the new location fix is newer or older
        long timeDelta = newLocation.getTime() - currentBestLocation.getTime();
        boolean isSignificantlyNewer = timeDelta > TWO_MINUTES;
        boolean isSignificantlyOlder = timeDelta < -TWO_MINUTES;
        boolean isNewer = timeDelta > 0;

        // If it's been more than two minutes since the current location, use the new location
        // because the user has likely moved.
        if (isSignificantlyNewer) {
            return newLocation;
        // If the new location is more than two minutes older, it must be worse
        } else if (isSignificantlyOlder) {
            return currentBestLocation;
        }

        // Check whether the new location fix is more or less accurate
        int accuracyDelta = (int) (newLocation.getAccuracy() - currentBestLocation.getAccuracy());
        boolean isLessAccurate = accuracyDelta > 0;
        boolean isMoreAccurate = accuracyDelta < 0;
        boolean isSignificantlyLessAccurate = accuracyDelta > 200;

        // Check if the old and new location are from the same provider
        boolean isFromSameProvider = isSameProvider(newLocation.getProvider(),
                currentBestLocation.getProvider());

        // Determine location quality using a combination of timeliness and accuracy
        if (isMoreAccurate) {
            return newLocation;
        } else if (isNewer && !isLessAccurate) {
            return newLocation;
        } else if (isNewer && !isSignificantlyLessAccurate && isFromSameProvider) {
            return newLocation;
        }
        return currentBestLocation;
    }

    /** Checks whether two providers are the same */
    private boolean isSameProvider(String provider1, String provider2) {
        if (provider1 == null) {
          return provider2 == null;
        }
        return provider1.equals(provider2);
    }


private void updateUILocation(Location location) {
        // We're sending the update to a handler which then updates the UI with the new
        // location.

        
    }
}	


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<







OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
//Location Manager Modi
package com.dev.streetfood;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.Settings;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.view.View;
import android.widget.Toast;


import java.io.IOException;
import java.util.List;
import java.util.Locale;

public class LocationTracker {
	 private LocationManager mLocationManager;
	 private boolean mGeocoderAvailable;
	 
	 private static final int TEN_SECONDS = 10000;
	 private static final int TEN_METERS = 10;
	 private static final int TWO_MINUTES = 1000 * 60 * 2;
	 
	 // The isPresent() helper method is only available on Gingerbread or above.
     mGeocoderAvailable =
             Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD && Geocoder.isPresent();
             
     // Get a reference to the LocationManager object.
      mLocationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);    
      
 }


//Set up fine and/or coarse location providers depending on whether the fine provider or  //entry
// both providers button is pressed.
private void setup() {
    Location gpsLocation = null;
    Location networkLocation = null;
    mLocationManager.removeUpdates(listener);
    // Request updates from both fine (gps) and coarse (network) providers.
        gpsLocation = requestUpdatesFromProvider(
                LocationManager.GPS_PROVIDER, R.string.not_support_gps);
        networkLocation = requestUpdatesFromProvider(
                LocationManager.NETWORK_PROVIDER, R.string.not_support_network);

        // If both providers return last known locations, compare the two and use the better
        // one to update the UI.  If only one provider returns a location, use it.
        if (gpsLocation != null && networkLocation != null) {
            updateUILocation(getBetterLocation(gpsLocation, networkLocation));
        } else if (gpsLocation != null) {
            updateUILocation(gpsLocation);
        } else if (networkLocation != null) {
            updateUILocation(networkLocation);
        }
    }


/**
 * Method to register location updates with a desired location provider.  If the requested
 * provider is not available on the device, the app displays a Toast with a message referenced
 * by a resource id.
 *
 * @param provider Name of the requested provider.
 * @param errorResId Resource id for the string message to be displayed if the provider does
 *                   not exist on the device.
 * @return A previously returned {@link android.location.Location} from the requested provider,
 *         if exists.
 */
private Location requestUpdatesFromProvider(final String provider, final int errorResId) {
    Location location = null;
    if (mLocationManager.isProviderEnabled(provider)) {
        mLocationManager.requestLocationUpdates(provider, TEN_SECONDS, TEN_METERS, listener);
        location = mLocationManager.getLastKnownLocation(provider);
    } else {
        Toast.makeText(this, errorResId, Toast.LENGTH_LONG).show();
    }
    return location;
}



private void doReverseGeocoding(Location location) {
    // Since the geocoding API is synchronous and may take a while.  You don't want to lock
    // up the UI thread.  Invoking reverse geocoding in an AsyncTask.
    (new ReverseGeocodingTask(this)).execute(new Location[] {location});
}

private void updateUILocation(Location location) {
	//Capture location is sent here
    // We're sending the update to a handler which then updates the UI with the new
    // location.
    Message.obtain(mHandler,
            UPDATE_LATLNG,
            location.getLatitude() + ", " + location.getLongitude()).sendToTarget();

    // Bypass reverse-geocoding only if the Geocoder service is available on the device.
    if (mGeocoderAvailable) doReverseGeocoding(location);
}

private final LocationListener listener = new LocationListener() {

    @Override
    public void onLocationChanged(Location location) {
        // A new location update is received.  Do something useful with it.  Update the UI with
        // the location update.
        updateUILocation(location);
    }

    @Override
    public void onProviderDisabled(String provider) {
    }

    @Override
    public void onProviderEnabled(String provider) {
    }

    @Override
    public void onStatusChanged(String provider, int status, Bundle extras) {
    }
};

/** Determines whether one Location reading is better than the current Location fix.
  * Code taken from
  * http://developer.android.com/guide/topics/location/obtaining-user-location.html
  *
  * @param newLocation  The new Location that you want to evaluate
  * @param currentBestLocation  The current Location fix, to which you want to compare the new
  *        one
  * @return The better Location object based on recency and accuracy.
  */
protected Location getBetterLocation(Location newLocation, Location currentBestLocation) {
    if (currentBestLocation == null) {
        // A new location is always better than no location
        return newLocation;
    }

    // Check whether the new location fix is newer or older
    long timeDelta = newLocation.getTime() - currentBestLocation.getTime();
    boolean isSignificantlyNewer = timeDelta > TWO_MINUTES;
    boolean isSignificantlyOlder = timeDelta < -TWO_MINUTES;
    boolean isNewer = timeDelta > 0;

    // If it's been more than two minutes since the current location, use the new location
    // because the user has likely moved.
    if (isSignificantlyNewer) {
        return newLocation;
    // If the new location is more than two minutes older, it must be worse
    } else if (isSignificantlyOlder) {
        return currentBestLocation;
    }

    // Check whether the new location fix is more or less accurate
    int accuracyDelta = (int) (newLocation.getAccuracy() - currentBestLocation.getAccuracy());
    boolean isLessAccurate = accuracyDelta > 0;
    boolean isMoreAccurate = accuracyDelta < 0;
    boolean isSignificantlyLessAccurate = accuracyDelta > 200;

    // Check if the old and new location are from the same provider
    boolean isFromSameProvider = isSameProvider(newLocation.getProvider(),
            currentBestLocation.getProvider());

    // Determine location quality using a combination of timeliness and accuracy
    if (isMoreAccurate) {
        return newLocation;
    } else if (isNewer && !isLessAccurate) {
        return newLocation;
    } else if (isNewer && !isSignificantlyLessAccurate && isFromSameProvider) {
        return newLocation;
    }
    return currentBestLocation;
}

/** Checks whether two providers are the same */
private boolean isSameProvider(String provider1, String provider2) {
    if (provider1 == null) {
      return provider2 == null;
    }
    return provider1.equals(provider2);
}

// AsyncTask encapsulating the reverse-geocoding API.  Since the geocoder API is blocked,
// we do not want to invoke it from the UI thread.
private class ReverseGeocodingTask extends AsyncTask<Location, Void, Void> {
    Context mContext;

    public ReverseGeocodingTask(Context context) {
        super();
        mContext = context;
    }

    @Override
    protected Void doInBackground(Location... params) {
        Geocoder geocoder = new Geocoder(mContext, Locale.getDefault());

        Location loc = params[0];
        List<Address> addresses = null;
        try {
            addresses = geocoder.getFromLocation(loc.getLatitude(), loc.getLongitude(), 1);
        } catch (IOException e) {
            e.printStackTrace();
            // Update address field with the exception.
            Message.obtain(mHandler, UPDATE_ADDRESS, e.toString()).sendToTarget();
        }
        if (addresses != null && addresses.size() > 0) {
            Address address = addresses.get(0);
            // Format the first line of address (if available), city, and country name.
            String addressText = String.format("%s, %s, %s",
                    address.getMaxAddressLineIndex() > 0 ? address.getAddressLine(0) : "",
                    address.getLocality(),
                    address.getCountryName());
            // Update address field on UI.
            Message.obtain(mHandler, UPDATE_ADDRESS, addressText).sendToTarget();
        }
        return null;
    }
}

/**
 * Dialog to prompt users to enable GPS on the device.
 */
private class EnableGpsDialogFragment extends DialogFragment {

    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        return new AlertDialog.Builder(getActivity())
                .setTitle(R.string.enable_gps)
                .setMessage(R.string.enable_gps_dialog)
                .setPositiveButton(R.string.enable_gps, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        enableLocationSettings();
                    }
                })
                .create();
    }
 }
}


OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO




// Directions

int Radius=6371;

                double lat1=18.4926417;

                double lat2=18.5333;

                double lon1=73.8498795;

                double lon2=73.8514;

                double dLat = Math.toRadians(lat2-lat1);

            double dLon = Math.toRadians(lon2-lon1);

            double a = Math.sin(dLat/2) * Math.sin(dLat/2) +

            Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *

            Math.sin(dLon/2) * Math.sin(dLon/2);

            double c = 2 * Math.asin(Math.sqrt(a));

            double valueResult= Radius*c;

            double km=valueResult/1;

            DecimalFormat newFormat = new DecimalFormat("####");

            int kmInDec =  Integer.valueOf(newFormat.format(km));

           double meter=valueResult%1000;

           double meterInDec= Integer.valueOf(newFormat.format(meter));

            Log.i("Radius Value",""+valueResult+"   KM  "+kmInDec+" Meter   "+meterInDec);


// Directions 2 API Based:

double distance1;

                Location locationA = new Location("point A");

                locationA.setLatitude(18.4926417);

                locationA.setLongitude(73.8498795);

                Location locationB = new Location("point B");

                locationB.setLatitude(18.5333);

                locationB.setLongitude(73.8514);

                

                distance1 = locationA.distanceTo(locationB);

                distance1=distance1/1000;


// UITestActivity


package com.sandeepjagtap.uitest;

import java.util.ArrayList;
import android.app.ActionBar;
import android.app.Activity;
import android.os.Bundle;
import android.widget.ListView;



public class UITESTActivity extends Activity {
                

    @Override
    
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        ActionBar actionBar = getActionBar();
        actionBar.hide();
    
        
        ArrayList<String> shopList= new ArrayList<String>();
        
        shopList.add("Anarase SamoseVvale");
        shopList.add("Durga Cafe");
        shopList.add("Kalyan Bhel");
     
        
        /* get the list view from the layout */
        ListView lView = ( ListView ) findViewById( R.id.listView1);
        
         
		 
		
        /* create and Adapter* */
        SimpleListAdapater sAdapter = new SimpleListAdapater(lView.getContext(),R.layout.list_item,shopList);
        
        /* set the list's adapter */
        lView.setAdapter(sAdapter);
        
    }

}

//Simple List Adapter


package com.sandeepjagtap.uitest;

import java.util.ArrayList;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;


public class SimpleListAdapater extends BaseAdapter {

                ArrayList <String> shopList=new ArrayList <String>();
    int resource;
    LayoutInflater inflater;
    Context context;
	
    private static class ViewHolder
	{
		TextView  shopName;		
		ImageView icn_Rating;	
		TextView  distance;
		//int position;
	}
    
	public SimpleListAdapater(Context ctx, int resourceId,ArrayList <String> data){
		 super();
		 this.resource = resourceId;
         this.inflater = LayoutInflater.from( ctx );
         this.context=ctx;
         this.shopList=data;
         
	}
	
	public int getCount() {
		shopList.size();
		return 0;
	}

	public Object getItem(int position) {
		return shopList.get(position);
		
	}

	public long getItemId(int position) {
		return position;
	}

	public View getView(int position, View convertView, ViewGroup parent) {
		
		View V = convertView;

	    if(V == null) {
	        LayoutInflater vi = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	        V = vi.inflate(R.layout.list_item, null);
	    }

	  

	    return V;
		
	}
	
	
	
	
}

//list Item.xml


<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android">
    <LinearLayout android:id="@+id/layout_shopinfo"
                  android:orientation="vertical">
        <TextView
            android:id="@+id/txt_shopName"
            android:text="ShopName"
            />
        
        <LinearLayout 
            android:id="@+id/layout_subInfo" 
            android:orientation="horizontal" >
            
         <TextView
            android:id="@+id/lbl_rating"
            android:text="Rating"/>
                	 <ImageView 
		     android:id="@+id/icn_rating"
             android:layout_width="wrap_content"
        	 android:layout_height="wrap_content"
        	 android:src="@drawable/star"/>  
         <TextView
            android:id="@+id/lbl_distance"
            android:text="Distance"/>
		 <TextView
            android:id="@+id/txt_distance"
            android:text="10km"/>
		 
         
        </LinearLayout>
        
    </LinearLayout>
    <LinearLayout android:id="@+id/layout_arrow">
         <ImageView
        android:id="@+id/icn_arrow"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:src="@drawable/arrowright" />
    </LinearLayout>
 </RelativeLayout>



Study Link;

http://www.itsalif.info/content/custom-list-views-icons-and-listeners-android

-------------------------------------------------------------------
Code for Option Menu:
--------------------------------------------------------------------
Activity.java :

@Override
    public boolean onCreateOptionsMenu(Menu menu) {
      MenuInflater menuInflater = getMenuInflater();
      menuInflater.inflate(R.layout.menu, menu);
      return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
      Intent intent = new Intent(Intent.ACTION_VIEW);
      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
      switch (item.getItemId()) {
        case R.id.getting_started:
        	 Toast.makeText(UITESTActivity.this, "Getting Started is Selected", Toast.LENGTH_SHORT).show();
          break;
         case R.id.send_feedback:
        	 Toast.makeText(UITESTActivity.this, "Send Feedback is Selected", Toast.LENGTH_SHORT).show(); 
          break;
        case R.id.about:
        	 Toast.makeText(UITESTActivity.this, "About is Selected", Toast.LENGTH_SHORT).show();
          break;
        default:
        	 	 return super.onOptionsItemSelected(item);
      }
      return true;
    } 

-------------------------------------------------
Menu.xml :

<?xml version="1.0" encoding="UTF-8"?>

<menu xmlns:android="http://schemas.android.com/apk/res/android">
  <item android:id="@+id/getting_started"
        android:title="Getting Started"
        android:icon="@android:drawable/ic_menu_help"
        android:orderInCategory="1"/>
  <item android:id="@+id/send_feedback"
        android:title="Send Feedback"
        android:icon="@android:drawable/ic_menu_send"
        android:orderInCategory="2"/>
  <item android:id="@+id/about"
        android:title="About Nomadic Food"
        android:icon="@android:drawable/ic_menu_info_details"
        android:orderInCategory="3"/>
  </menu>

----------------------------------------------------------
Andorid Manifest.xml

  android:theme="@android:style/Theme.NoTitleBar"

------------------------------------------------------------
Style.xml

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <style name="NoActionBar" parent="@android:style/Theme.Holo.Light">
  
</style> 
</resources>

----------------------------------------------------------------
---------------------------------------------------------
